import unittest

import os
import time
import erpc
import CppHeaderParser

from erpcgen_files.py.uart_rpc import client


class TestUART(unittest.TestCase):
    @classmethod
    def setupClass(cls):
        """
        Check for device existence, can connect, gives ack, etc.
        :return:
        """
        # Grab the correct crc from the autogenerated header file
        cls.crcHeader = CppHeaderParser.CppHeader("./erpcgen_files/src/erpc_crc16.h")
        for define in cls.crcHeader.defines:
            if 'ERPC_GENERATED_CRC' in define:
                cls.crc_value = int(define.split(' ')[1])

        # Using the CRC value, create a new serial transport instance. This will always be @ 115200 baud
        cls.transport = erpc.transport.SerialTransport("COM5", 115200)
        cls.transport.crc_16 = cls.crc_value

        # Create the client that actually talks to the DUT
        cls.client_manager = erpc.client.ClientManager(cls.transport, erpc.basic_codec.BasicCodec)
        cls.client_instance = client.TEST_UARTClient(cls.client_manager)


        # TODO: Need to write an interface to detect the DUT w/STLink and the correct port for RPCs

    @classmethod
    def tearDownClass(cls):
        """
        Clean up operations
        :return:
        """
        pass

    def setUpModule(self):
        """
        Put the MCU into a known state before running next test
        :return:
        """
        pass

    def tearDownModule(self):
        """
        Put the MCU into a known state before running next test
        :return:
        """
        pass

    def test_BlockingTX(self):
        pass

    def test_BlockingRX(self):
        pass

    def test_InterruptTX(self):
        pass

    def test_InterruptRX(self):
        pass

    def test_DmaTX(self):
        pass

    def test_DmaRX(self):
        pass

    def set_mode(self, peripheral, mode):
        pass

    def set_baudrate(self, baud):
        pass

    def detect_usb_to_serial_converter(self):
        pass

    def detect_stlink(self):
        """
        Could check for some stupid fancy stuff here.
        :return:
        """
        pass


if __name__ == '__main__':
    unittest.main()
